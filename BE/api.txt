Product 
Product detail - get

endpoint:
“/products/productId”

res:
{
“product_id”:”String”,
  "description": "string",            // Mô tả sản phẩm
  "discount_price": 9.0,              // Giá sau khi giảm (float)
  "highlights": "",                   // Các điểm nổi bật (string)
  "images": ["string", ""],           // Danh sách URL ảnh (mảng string) - ảnh lưu vào storage trong supabase.
  "original_price": 9.0,              // Giá gốc (float)
  "owner": "string",                  // ID hoặc tên người tạo sản phẩm
  "product_type": "string",      // enum: electronic, fashion, grocery, book, art, other.
  "rating": 0.0,                      // Điểm đánh giá (float từ 0 đến 5)
  "search_tags": [],                  // Mảng từ khóa tìm kiếm (mảng string)
  "seller": "string",                 // ID người bán
  "title": "string",                  // Tên sản phẩm
  "variant": "string"                 // Biến thể (ví dụ: màu sắc, kích cỡ)
}

Product list - get

“/products”

[
{} - list các product như trên
{}
]

Product category

1 trong mấy cái product type: 
electronic, fashion, grocery, book, art, other
“/products?category=product_type”

trả về list product như trên

Product search
“/products?category=product_type&query=shoe” // search trong category
“/products?query=shoe” // search trong tất cả products

trả về list products như trên

ý tưởng xử lý backend

Tạo product model

# models.py
from django.db import models
from django.contrib.postgres.fields import ArrayField  # cần nếu dùng PostgreSQL

class Product(models.Model):
    product_id = models.CharField(max_length=255, primary_key=True)
    title = models.TextField()
    description = models.TextField()
    highlights = models.TextField()
    variant = models.TextField()
    seller = models.TextField()
    product_type = models.CharField(max_length=50)
    original_price = models.FloatField()
    discount_price = models.FloatField()
    rating = models.FloatField()
    images = ArrayField(models.URLField(), blank=True, default=list)  # nếu dùng PostgreSQL
    search_tags = ArrayField(models.CharField(max_length=100), blank=True, default=list)

tạo api

# views.py
from rest_framework.decorators import api_view
from rest_framework.response import Response
from django.db.models import Q
from .models import Product
from .serializers import ProductSerializer

@api_view(['GET'])
def search_products(request):
    query = request.GET.get('query', '').lower()
    category = request.GET.get('category', None)

    if not query:
        return Response({"error": "Missing query parameter"}, status=400)

    qs = Product.objects.all()
    if category:
        qs = qs.filter(product_type=category)

    tag_matches = qs.filter(search_tags__contains=[query])
    text_matches = qs.filter(
        Q(title__icontains=query) |
        Q(description__icontains=query) |
        Q(highlights__icontains=query) |
        Q(variant__icontains=query) |
        Q(seller__icontains=query)
    )

    # Gộp kết quả không trùng
    final_qs = tag_matches.union(text_matches)

    serializer = ProductSerializer(final_qs, many=True)
    return Response(serializer.data)






Review - post
“/products/review/productid”

header 
{token: bearer userUid} - mang token là id để định danh người dùng

req
body = {
	“rating”:5,
	“review”:”String”
}

res
body = {
	“success”:true
}

Review - get

“/products/review/productid”

req - list review
body = {
[
{
“rating”:5,
	“review”:”String”,
	“review_uid”:”String”, – định danh người gửi - id của user
	“review_name”:”String” – tên người dùng
}
]

Product you like - get
“/users/favourite” 
lấy product_id từ favourite_products trong users
xong lấy product list trong products

header
{token: bearer userUid} - mang token là id để định danh người dùng

res cũng trả về list các product như trên
[
{}
{}
]

Product you like - post
“/users/favourite/productId”

kiểm tra trong list favourite có id này không
có thì remove 
không thì add id vào

trả về 
{“status”:true}
